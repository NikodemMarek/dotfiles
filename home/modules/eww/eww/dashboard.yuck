; powermenu
(defwidget powermenu_poweroff [] 
	(button :class "powermenu_button powermenu_poweroff" :onclick "systemctl poweroff" ""))
(defwidget powermenu_reboot [] 
	(button :class "powermenu_button powermenu_reboot" :onclick "systemctl reboot" ""))
(defwidget powermenu_lock [] 
	(button :class "powermenu_button powermenu_lock" :onclick "hyprlock" ""))
(defwidget powermenu_logout [] 
	(button :class "powermenu_button powermenu_logout" :onclick "hyprctl dispatch exit" ""))
(defwidget powermenu_sleep [] 
	(button :class "powermenu_button powermenu_sleep" :onclick "hyprlock ; systemctl suspend ; eww reload" ""))
(defwidget powermenu_hibernate [] 
	(button :class "powermenu_button powermenu_hibernate" :onclick "hyprlock ; systemctl hibernate ; eww reload" ""))

(defwidget powermenu []
	(box :class "powermenu dashboard_window" :orientation "v" :space-evenly false
		(box :vexpand true :hexpand true
			(powermenu_poweroff)
			(powermenu_lock)
			(powermenu_sleep))
		(box :vexpand true :hexpand true
			(powermenu_reboot)
			(powermenu_logout)
			(powermenu_hibernate))))

; clock
(defwidget time [] 
	(box :class "clock dashboard_window" :orientation "v" :vexpand true :hexpand true 
		(box :class "" :orientation "v" :spacing 20 :space-evenly false :valign "center" :halign "center"
			(label :class "time" :text { formattime(EWW_TIME, "%H %M %S") })
			(label :class "date" :text { formattime(EWW_TIME, "%a, %b %e") }))))

; music
(deflisten music_status :initial "err" `playerctl -F status`)
(deflisten music_song :initial "title unknown" `playerctl -F metadata xesam:title`)
(deflisten music_artist :initial "artist unknown" `playerctl -F metadata xesam:artist`)
(deflisten music_cover :initial "" `playerctl -F metadata mpris:artUrl`)

(defwidget music []
	(box :class "music dashboard_window" :orientation "h" :space-evenly true :vexpand false :hexpand false
		(box :class "music_cover" :vexpand true :hexpand true :style "background-image: url('${music_cover}');")
		(box :orientation "v" :valign "center" :spacing 30 :space-evenly false :vexpand true :hexpand false
			(label :halign "center" :class "song" :wrap true :limit-width 20 :text music_song)
			(label :halign "center" :class "artist" :wrap true :limit-width 15 :text music_artist)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly true :vexpand false :hexpand false
				(button :class "music_play_random" :onclick "beet play -y &" "")
				(button :class "music_prev" :onclick "playerctl previous" "󰒮")
				(button :class "music_status" :onclick "playerctl play-pause" { music_status == "Playing"? "": "" })
				(button :class "music_next" :onclick "playerctl next" "󰒭")))))

; volume
(defpoll volume_level :interval "1s" `wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print $2 * 100}'`)
(defpoll volume_muted :interval "1s" `wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print $3 == "[MUTED]"}'`)

(defwidget volume []
	(box :class "volume dashboard_window" :orientation "v" :space-evenly true
		(box :class "" :orientation "h"
			(button :class "volume_button" :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle" { volume_muted == "1"? "": "" })
			(label :class "volume_level" :text volume_level))
		(scale :min 0 :max 101 :value volume_level :orientation "h" :flipped false :active true :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")))

; app list
(deflisten app_list_apps :initial "empty" `./list-apps`)

(defwidget app_list []
    (literal :class "dashboard_window app_list" :content app_list_apps))
